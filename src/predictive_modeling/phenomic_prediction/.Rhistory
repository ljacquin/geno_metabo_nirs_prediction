# script meant to perform phenomic prediction and analyses for apple scab resistance
# note: text is formatted from Addins using Style active file from styler package
# clear memory and source libraries
rm(list = ls())
library(MASS)
library(data.table)
library(doParallel)
library(doRNG)
library(robustbase)
library(foreach)
library(parallel)
library(Matrix)
library(rgl)
library(cvTools)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(KRMM)
library(kernlab)
library(glmnet)
library(ranger)
library(geomtextpath)
library(dplyr)
library(tidyr)
library(viridis)
library(stringr)
library(prospectr)
library(signal)
library(FactoMineR)
library(factoextra)
library(lme4)
library(lsmeans)
library(png)
library(devtools)
install_other_requirements <- F
if (install_other_requirements) {
devtools::install_github("ljacquin/KRMM")
}
local_computation_ <- T
if (local_computation_) {
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
}
source("../../functions.R")
# define function(s) and package(s) to export for parallelization
pkgs_to_export_ <- c(
"ranger",
"kernlab",
"KRMM",
"glmnet",
"foreach",
"cvTools"
)
# set input paths
nirs_dir_path <- "../../../data/phenomic_data/"
pheno_dir_path <- "../../../data/phenotype_data/"
# output result path for phenomic graphics
output_pred_results_path <- "../../../results/phenomic_prediction/"
output_graphics_path <- "../../../results/graphics/phenomic_graphics/"
output_pred_graphics_path <- "../../../results/graphics/phenomic_prediction_graphics/"
# define nirs type for analysis
nirs_type_ <- "NIRJ-1" # "NIRJ5" # "NIRJ-1"
# define selected blocs for experiment
selected_blocs_ <- c("B2", "B8") # c("B4", "B6") # c("B2", "B8")
# should de-trending be applied to spectra ?
apply_detrend_ <- T
# should Savitzky-Golay filtering be applied to spectra ?
apply_sg_filter_ <- T
# define derivative order, polynome order and number of support points for
# Savitzky-Golay filtering
deriv_order_ <- 1 # 2
polynome_order_ <- 2 # 3
num_supp_ <- 37 # 61
vect_order_char_ <- c("first", "second")
# define selected traits, and the analyzed one defined by trait_
selected_traits_ <- c(
"BLUPaudpc.eau.EUB04.18",
"BLUPaudpc.eau.EUB04.19",
"BLUPaudpc.eau.09BCZ14.prin19"
)
trait_ <- "BLUPaudpc.eau.EUB04.18" # "BLUPaudpc.eau.09BCZ14.prin19"
# define experimental vars
experim_vars_ <- c(
"geno", "bloc", "kinetic",
"enveloppe", "position"
)
# define shift seed value by
mult_seed_by_ <- 100
# set k for K-folds cv
k_folds_ <- 5
# define number of shuffles
n_shuff_ <- 2
# define color function for genotypes
col_func_genotype <- colorRampPalette(c(
"black", "blue", "red", "orange",
"yellow", "green"
))
# get phenotype, nirs and bloc data
# pheno data
pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"phenotype_data_family.csv"
)))
# nirs data
nirs_df <- as.data.frame(fread(
paste0(
nirs_dir_path,
paste0(nirs_type_, "_FAMF.txt")
),
header = T
))
nirs_df$Wavelength <- paste0(
nirs_type_, "_", unlist(str_extract_all(
nirs_df$Wavelength,
pattern = "[0-9_]{3,4}_[0-9_]{1}"
))
)
# geno/bloc data
geno_bloc_df <- as.data.frame(fread(paste0(
nirs_dir_path,
"labels_alu_spring_2024.csv"
), header = T))
colnames(geno_bloc_df) <- c("bloc", "geno", "enveloppe")
# split wave length column into "kinetic", "enveloppe" and "position"
nirs_df <- separate(nirs_df, Wavelength, c(
"kinetic",
"enveloppe",
"position"
), sep = "_")
# select genotypes according to defined blocs if they are defined
if (length(selected_blocs_) > 0) {
geno_bloc_df <- geno_bloc_df[
geno_bloc_df$bloc %in% selected_blocs_,
]
}
# filter nirs data according to selected blocs and merge by enveloppe
nirs_filtered_df <- merge(nirs_df, geno_bloc_df, by = "enveloppe")
nirs_filtered_df <- nirs_filtered_df %>% dplyr::select(
experim_vars_,
everything()
)
# clean filtered nirs data for columns having na on all rows
nirs_filtered_df <- nirs_filtered_df[
, colSums(is.na(nirs_filtered_df)) != nrow(nirs_filtered_df)
]
# correct for geno, bloc and  position effect
fitted_col_names_ <- colnames(nirs_filtered_df)[
(length(experim_vars_)
+ 1):ncol(nirs_filtered_df)
]
df = nirs_filtered_df
var_name = "350"
model <- lmer(df[, var_name] ~ 1
+ (1 | geno) + bloc + position, data = df)
adj_geno_wave_val_ <- ranef(model)$geno
adj_geno_wave_val_ <- cbind(
rownames(adj_geno_wave_val_),
adj_geno_wave_val_
)
model
residuals(model)
length(residuals(model))
